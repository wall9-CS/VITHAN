{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPybCt9pqZ31JCo9SkKL+wh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-XZB4ft44R8S","executionInfo":{"status":"ok","timestamp":1749793317552,"user_tz":-540,"elapsed":23782,"user":{"displayName":"URP","userId":"16515248769931109428"}},"outputId":"a7a83c00-4413-49d8-b478-402a7b049a5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Clipping & Normalization"],"metadata":{"id":"K8fzAyXC4Yb_"}},{"cell_type":"code","source":["import pandas as pd\n","from collections import defaultdict\n","\n","file_path = \"/content/drive/MyDrive/code/VTHNKG-NQ/triplets_with_numeric_qualifiers.txt\"\n","\n","# 처리 대상 numeric qualifier\n","numeric_qualifiers = {\"legAmount\", \"weightAverage\", \"lengthAverage\", \"lifespan\"}\n","\n","# 1. 데이터 파싱\n","raw_entries = defaultdict(list)\n","\n","with open(file_path, 'r', encoding='utf-8') as f:\n","    for line in f:\n","        parts = line.strip().split('\\t')\n","        if len(parts) not in {3, 5, 7}:\n","            continue\n","\n","        head, relation, tail = parts[0], parts[1], parts[2]\n","        key = (head, relation, tail)\n","\n","        if len(parts) == 3:\n","                raw_entries[key].append((\" \", \" \"))\n","\n","        try:\n","            qualifier1, value1 = parts[3], float(parts[4])\n","            if qualifier1 in numeric_qualifiers:\n","                raw_entries[key].append((qualifier1, value1))\n","        except:\n","            continue\n","\n","        if len(parts) == 7:\n","            try:\n","                qualifier2, value2 = parts[5], float(parts[6])\n","                if qualifier2 in numeric_qualifiers:\n","                    raw_entries[key].append((qualifier2, value2))\n","            except:\n","                continue\n","\n","# 2. 클리핑 기준 정의\n","clip_thresholds = {\n","    \"lengthAverage\": (0.5, 30),\n","    \"weightAverage\": (0.5, 1000),\n","    \"lifespan\": (1, 200),\n","    \"legAmount\": (1, 20)\n","}\n","\n","# 3. qualifier별 정규화 값 계산\n","all_qualifier_values = {q: [] for q in numeric_qualifiers}\n","for triples in raw_entries.values():\n","    for qualifier, value in triples:\n","        try:\n","          min_clip, max_clip = clip_thresholds[qualifier]\n","        except:\n","          continue\n","        if min_clip <= value <= max_clip:\n","            all_qualifier_values[qualifier].append(value)\n","\n","# 4. 정규화용 min/max 계산\n","scaling_info = {}\n","for q in numeric_qualifiers:\n","    values = all_qualifier_values[q]\n","    if values:\n","        min_val = min(values)\n","        max_val = max(values)\n","        scaling_info[q] = (min_val, max_val)\n","\n","# 5. 정규화 및 저장\n","with open(\"/content/drive/MyDrive/code/VTHNKG-NQ/normalized_qualifiers.txt\", 'w', encoding='utf-8') as fout:\n","    for (head, relation, tail), qualifiers in raw_entries.items():\n","        norm_parts = []\n","        for qualifier, value in qualifiers:\n","            if qualifier not in scaling_info:\n","                continue\n","            min_val, max_val = scaling_info[qualifier]\n","            if min_val < value <= max_val:\n","                norm_value = (value - min_val) / (max_val - min_val) if max_val > min_val else 0.0\n","                norm_parts.extend([qualifier, f\"{norm_value:.6f}\"])  # 소수점 6자리\n","        if norm_parts:\n","            fout.write('\\t'.join([head, relation, tail] + norm_parts) + '\\n')\n","        else:\n","            fout.write('\\t'.join([head, relation, tail]) + '\\n')\n"],"metadata":{"id":"GOJTX-Uk4Xoq","executionInfo":{"status":"ok","timestamp":1749793409315,"user_tz":-540,"elapsed":1180,"user":{"displayName":"URP","userId":"16515248769931109428"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# Dataset Split\n","train 80%, valid 10%, test 10%"],"metadata":{"id":"a0ELiZd6GPy1"}},{"cell_type":"code","source":["import random\n","random.seed(0)\n","# 전체 데이터 읽기\n","with open('/content/drive/MyDrive/code/VTHNKG-NQ/normalized_qualifiers.txt', 'r', encoding='utf-8') as f:\n","    triplets = f.readlines()\n","\n","# 전체 데이터 섞기\n","random.shuffle(triplets)\n","\n","# 데이터셋 분할 비율 설정\n","total_lines = len(triplets)\n","train_split = int(total_lines * 0.8)\n","valid_split = train_split + int(total_lines * 0.1)\n","\n","# 데이터셋 분할\n","train_data = triplets[:train_split]\n","valid_data = triplets[train_split:valid_split]\n","test_data = triplets[valid_split:]\n","\n","# 각 데이터셋을 파일로 저장\n","def save_dataset(filename, data):\n","    with open(filename, 'w', encoding='utf-8') as f:\n","        f.writelines(data)\n","\n","save_dataset('/content/drive/MyDrive/code/VTHNKG-NQ/train.txt', train_data)\n","save_dataset('/content/drive/MyDrive/code/VTHNKG-NQ/valid.txt', valid_data)\n","save_dataset('/content/drive/MyDrive/code/VTHNKG-NQ/test.txt', test_data)\n","\n","# 데이터셋 크기 출력\n","print(f\"Total triplets: {total_lines}\")\n","print(f\"Train set: {len(train_data)} triplets ({len(train_data)/total_lines*100:.2f}%)\")\n","print(f\"Valid set: {len(valid_data)} triplets ({len(valid_data)/total_lines*100:.2f}%)\")\n","print(f\"Test set: {len(test_data)} triplets ({len(test_data)/total_lines*100:.2f}%)\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PWDaRP0nGPP0","executionInfo":{"status":"ok","timestamp":1749793452157,"user_tz":-540,"elapsed":57,"user":{"displayName":"URP","userId":"16515248769931109428"}},"outputId":"e69a126f-19b3-4f96-e6f0-e0340050f736"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Total triplets: 1316\n","Train set: 1052 triplets (79.94%)\n","Valid set: 131 triplets (9.95%)\n","Test set: 133 triplets (10.11%)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"wL1MSSdpd5n7"},"execution_count":null,"outputs":[]}]}